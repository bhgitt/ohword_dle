import { lowerCase, times } from "lodash";
import { useCallback, useMemo, useState } from "react";
import axios from "axios";
import Head from "next/head";
import type { NextPage } from "next";
import Keyboard from "../components/Keyboard";
import LetterBlock from "../components/LetterBlock";

type Attempt = {
  letters: AttemptLetter[];
};

type GameStatus = "PLAYING" | "WON" | "LOST";

const Home: NextPage = () => {
  const [attempts, setAttempts] = useState<Attempt[]>(
    times(6, () => ({
      letters: [],
    }))
  );
  const [currentAttemptIndex, setCurrentAttemptIndex] = useState(0);
  const [letterHistory, setLetterHistory] = useState<LetterHistory[]>([]);

  const gameStatus: GameStatus = useMemo(() => {
    if (currentAttemptIndex > 6) {
      return "LOST";
    }
    if (
      attempts.find(
        (attempt) =>
          attempt.letters.filter(({ result }) => result === "GREEN").length ===
          5
      )
    ) {
      return "WON";
    }
    return "PLAYING";
  }, [attempts, currentAttemptIndex]);

  const handleSubmitAttempt = useCallback(async () => {
    const currentAttempt = attempts[currentAttemptIndex];
    try {
      if (currentAttempt.letters.length < 5) {
        throw new Error("incorrect-word-length");
      }
      const { data: attemptResult } = await axios.get<AttemptResponse>(
        "/api/attempt",
        {
          params: {
            word: currentAttempt.letters.reduce(
              (agg, char) => `${agg}${char.char}`,
              ""
            ),
          },
        }
      );
      setAttempts(
        attempts.map((attempt, index) => {
          if (index !== currentAttemptIndex) {
            return attempt;
          }
          return {
            letters: currentAttempt.letters.map((char, index) => {
              const result = attemptResult.letters[index].status;
              return {
                ...char,
                result,
              };
            }),
          };
        })
      );
      setCurrentAttemptIndex(currentAttemptIndex + 1);
      const newLetterHistory = [...letterHistory];
      attemptResult.letters.forEach((letter) => {
        const existingHistoryIndex = newLetterHistory.findIndex(
          (history) => history.char === letter.char
        );
        if (existingHistoryIndex === -1) {
          newLetterHistory.push({
            char: letter.char,
            result: letter.status,
          });
          return;
        }
        if (
          newLetterHistory[existingHistoryIndex].result === "YELLOW" &&
          letter.status === "GREEN"
        ) {
          newLetterHistory[existingHistoryIndex].result = letter.status;
        }
      });
      setLetterHistory(newLetterHistory);
    } catch (error) {
      alert(error);
    }
  }, [attempts, currentAttemptIndex, letterHistory]);

  const handleKeyboardChange = useCallback(
    (newText: string) => {
      if (newText.length > 5 || gameStatus !== "PLAYING") {
        return;
      }
      setAttempts(
        attempts.map((attempt, index) => {
          if (index !== currentAttemptIndex) {
            return attempt;
          }
          return {
            letters: newText
              .split("")
              .map((newTextChar) => ({ char: lowerCase(newTextChar) })),
          };
        })
      );
    },
    [gameStatus, currentAttemptIndex, attempts]
  );

  return (
    <div>
      <Head>
        <title>Endy&apos;s Wordle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-slate-50 min-h-screen flex flex-col">
        <div className="container px-8 mx-auto bg-white max-w-lg shadow-lg flex-1 flex flex-col justify-center">
          <div className="py-8 h-full flex flex-col space-y-2">
            {attempts.map((attempt, index) => {
              return (
                <div
                  className="flex space-x-2 justify-center"
                  key={`attempt-${index}`}
                >
                  {times(5, (charIndex) => {
                    const letter = attempt.letters[charIndex];
                    return (
                      <LetterBlock
                        key={`attempt-${index}-${charIndex}`}
                        letter={letter}
                        sequence={charIndex}
                      />
                    );
                  })}
                </div>
              );
            })}
          </div>
        </div>
        <Keyboard
          text={attempts[currentAttemptIndex].letters.reduce(
            (text, letter) => `${text}${letter.char}`,
            ""
          )}
          letterHistory={letterHistory}
          onChange={handleKeyboardChange}
          onSubmit={handleSubmitAttempt}
        />
      </main>
    </div>
  );
};

export default Home;
