import axios from "axios";
import { times } from "lodash";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useMemo, useState } from "react";
import Keyboard from "../components/Keyboard";

type Attempt = {
  chars: { letter: string; result?: "BLACK" | "YELLOW" | "GREEN" }[];
};

const Home: NextPage = () => {
  const [attempts, setAttempts] = useState<Attempt[]>(
    times(6, () => ({
      chars: [],
    }))
  );
  const [currentAttempt, setCurrentAttempt] = useState(0);

  return (
    <div>
      <Head>
        <title>Endy&apos;s Wordle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-slate-50 min-h-screen flex flex-col">
        <div className="container px-8 mx-auto bg-white max-w-lg shadow-lg flex-1">
          <div className="py-8 flex flex-col space-y-2">
            {attempts.map((attempt, index) => {
              return (
                <div
                  className="flex space-x-2 justify-center"
                  key={`attempt-${index}`}
                >
                  {times(5, (charIndex) => {
                    return (
                      <div
                        className="flex-1 aspect-square border-2 flex justify-center items-center"
                        key={`attempt-${index}-${charIndex}`}
                      >
                        {!!attempt.chars[charIndex] && (
                          <span className="text-5xl font-bold text-slate-600">
                            {attempt.chars[charIndex].letter}
                          </span>
                        )}
                      </div>
                    );
                  })}
                </div>
              );
            })}
          </div>
        </div>
        <Keyboard
          text={attempts[currentAttempt].chars.reduce(
            (text, char) => `${text}${char.letter}`,
            ""
          )}
          onChange={(newText) => {
            if (newText.length > 5) {
              return;
            }
            setAttempts(
              attempts.map((attempt, index) => {
                if (index !== currentAttempt) {
                  return attempt;
                }
                return {
                  chars: newText
                    .split("")
                    .map((newTextChar) => ({ letter: newTextChar })),
                };
              })
            );
          }}
          onSubmit={() => {}}
        />
      </main>
    </div>
  );
};

export default Home;
