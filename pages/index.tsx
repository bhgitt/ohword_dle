import { times } from "lodash";
import { useCallback, useMemo, useState } from "react";
import axios from "axios";
import Head from "next/head";
import type { NextPage } from "next";
import Keyboard from "../components/Keyboard";

type Attempt = {
  chars: { letter: string; result?: "BLACK" | "YELLOW" | "GREEN" }[];
};

type GameStatus = "PLAYING" | "WON" | "LOST";

const Home: NextPage = () => {
  const [attempts, setAttempts] = useState<Attempt[]>(
    times(6, () => ({
      chars: [],
    }))
  );
  const [currentAttemptIndex, setCurrentAttemptIndex] = useState(0);

  const gameStatus: GameStatus = useMemo(() => {
    if (currentAttemptIndex > 6) {
      return "LOST";
    }
    if (
      attempts.find(
        (attempt) =>
          attempt.chars.filter(({ result }) => result === "GREEN").length === 5
      )
    ) {
      return "WON";
    }
    return "PLAYING";
  }, [attempts, currentAttemptIndex]);

  const submitAttempt = useCallback(async () => {
    const currentAttempt = attempts[currentAttemptIndex];
    if (currentAttempt.chars.length < 5) {
      return;
    }
    try {
      const { data: attemptResult } = await axios.get<AttemptResponse>(
        "/api/attempt",
        {
          params: {
            word: currentAttempt.chars.reduce(
              (agg, char) => `${agg}${char.letter}`,
              ""
            ),
          },
        }
      );
      setAttempts(
        attempts.map((attempt, index) => {
          if (index !== currentAttemptIndex) {
            return attempt;
          }
          return {
            chars: currentAttempt.chars.map((char, index) => {
              const result = attemptResult.letters[index].status;
              return {
                ...char,
                result,
              };
            }),
          };
        })
      );
      setCurrentAttemptIndex(currentAttemptIndex + 1);
    } catch (error) {}
  }, [attempts, currentAttemptIndex]);

  return (
    <div>
      <Head>
        <title>Endy&apos;s Wordle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-slate-50 min-h-screen flex flex-col">
        <div className="container px-8 mx-auto bg-white max-w-lg shadow-lg flex-1">
          <div className="py-8 flex flex-col space-y-2">
            {attempts.map((attempt, index) => {
              return (
                <div
                  className="flex space-x-2 justify-center"
                  key={`attempt-${index}`}
                >
                  {times(5, (charIndex) => {
                    const renderResultBlock = () => {
                      if (!attempt.chars[charIndex]?.result) {
                        return null;
                      }
                      const getBackgroundClassName = () => {
                        switch (attempt.chars[charIndex].result) {
                          case "GREEN":
                            return "bg-green-400";
                          case "YELLOW":
                            return "bg-yellow-400";
                          case "BLACK":
                          default:
                            return "bg-slate-100";
                        }
                      };
                      return (
                        <span
                          className={`absolute inset-0 ${getBackgroundClassName()}`}
                        />
                      );
                    };
                    return (
                      <div
                        className="flex-1 aspect-square border-2 flex justify-center items-center relative"
                        key={`attempt-${index}-${charIndex}`}
                      >
                        {renderResultBlock()}
                        {!!attempt.chars[charIndex] && (
                          <span className="relative text-5xl font-bold text-slate-600">
                            {attempt.chars[charIndex].letter}
                          </span>
                        )}
                      </div>
                    );
                  })}
                </div>
              );
            })}
          </div>
        </div>
        <Keyboard
          text={attempts[currentAttemptIndex].chars.reduce(
            (text, char) => `${text}${char.letter}`,
            ""
          )}
          onChange={(newText) => {
            if (newText.length > 5 || gameStatus !== "PLAYING") {
              return;
            }
            setAttempts(
              attempts.map((attempt, index) => {
                if (index !== currentAttemptIndex) {
                  return attempt;
                }
                return {
                  chars: newText
                    .split("")
                    .map((newTextChar) => ({ letter: newTextChar })),
                };
              })
            );
          }}
          onSubmit={submitAttempt}
        />
      </main>
    </div>
  );
};

export default Home;
